#= require_tree ./models
#= require_tree ./collections
#= require_tree ./views
#= require_tree ./components
#= require_tree ./routers

$ ->
  container = document.getElementById('location-browser')
  return false unless container?

  locations = new Sparkle.Collections.Locations
  locations.fetch().done ->
    new Sparkle.Routers.LocationFinder(container, locations)

    Backbone.history.start
      # pushState: true
      root: "/locations"

  window.locationFinder = locationFinder =
    collection: locations,
    updateUrl: (parentParams) ->
      path = switch
        when parentParams?.url? then parentParams.url
        when parentParams?.hasOwnProperty("id")
          parentUrl = locations.get(parentParams.id)?.get('url') || ""
        else
          locations.currentParent?.get('url') || ""

      path = path.replace("/locations", "")

      Backbone.history.navigate(path, true);

    scopeSearch: (searchParams) ->
      if searchParams?
        {lat, lng, range} = searchParams

      params = switch
        when lat?, lng?
          latLng: new google?.maps.LatLng lat, lng
          range: range || 8047 # locked to 5 miles right now
        when range?
          _.extend(locations.searchParams, {range: range})

      locations.changeSearchParams params

  _.extend(locationFinder, Backbone.Events)

  locationFinder.on
    'changeParent': (parentParams) ->
      @updateUrl(parentParams)

    'setSearchParams': (searchParams) ->
      @scopeSearch(searchParams)
